{"version":3,"sources":["store/reducers/panoramasReducer.js","store/reducers/index.js","store/actions/types.js","config/firebase.js","components/Panorama.js","store/actions/panoramasActions.js","components/PanoramasList.js","components/PanoramaAframeAssests.js","components/MainPanorama.js","App.js","serviceWorker.js","index.js"],"names":["initialState","itemsList","itemsDict","mainPanoramaId","combineReducers","panoramas","state","arguments","length","undefined","action","type","Object","values","payload","sort","a","b","data","index","objectSpread","objectId","id","panoramasRef","firebase","initializeApp","databaseURL","serviceAccount","require","database","ref","orderByChild","equalTo","Panorama","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hoverOn","bind","assertThisInitialized","hoverOff","hover","e","changeMainPanorama","setState","_this2","react_default","createElement","react_router_dom","to","className","onClick","handleClick","onMouseEnter","onMouseLeave","style","borderColor","isactive","transform","transition","alt","src","thumbnail","category","Component","connect","dispatch","PanoramasList","handleCollapse","collapse","fetchPanoramas","map","item","components_Panorama","key","maxHeight","withRouter","ownProps","match","params","assests","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","once","snapshot","val","stop","_x","apply","PanoramaAframeAssests","assest","desktopUrl","crossOrigin","preload","MainPanorama","entity","React","createRef","loading","document","getElementById","addEventListener","react_loader_spinner_default","color","height","width","dist","components_PanoramaAframeAssests","primitive","middleware","reduxThunk","store","createStore","reducers","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","es","react_router","path","render","src_components_MainPanorama","src_components_PanoramasList","Boolean","location","hostname","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2hFAEMA,EAAe,CACpBC,UAAU,GACTC,UAAW,GACXC,eAAgB,ICDHC,cAAgB,CAC7BC,UDEa,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBP,EAAcU,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC/C,OAAQC,EAAOC,MACb,IET2B,kBFUzB,IAAMN,EAAYO,OAAOC,OAAOH,EAAOI,SAIzC,OAHET,EAAUU,KAAK,SAACC,EAAEC,GAChB,OAAOD,EAAEE,KAAKC,MAAMF,EAAEC,KAAKC,QAExBP,OAAAQ,EAAA,EAAAR,CAAA,GACHN,EADJ,CAECL,UAAWI,EACRH,UAAWQ,EAAOI,QAClBX,eAAgBE,EAAU,GAAGa,KAAKG,WAEtC,IEnBiC,wBFoB/B,IAAMC,EAAKZ,EAAOI,QAClB,OAAOF,OAAAQ,EAAA,EAAAR,CAAA,GACFN,EADL,CAEEH,eAAgBmB,IAEpB,QACE,OAAOhB,8CGpBAiB,SALSC,EAASC,cAAc,CAC3CC,YAAa,uCACbC,eAAgBC,EAAQ,OAGgBC,WAAWC,IAAI,cAAcC,aAAa,YAAYC,QAAQ,wCCFlGC,cACL,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAvB,OAAAwB,EAAA,EAAAxB,CAAAyB,KAAAJ,IACjBE,EAAAvB,OAAA0B,EAAA,EAAA1B,CAAAyB,KAAAzB,OAAA2B,EAAA,EAAA3B,CAAAqB,GAAAO,KAAAH,KAAMH,KAEDO,QAAUN,EAAKM,QAAQC,KAAb9B,OAAA+B,EAAA,EAAA/B,QAAA+B,EAAA,EAAA/B,CAAAuB,KACfA,EAAKS,SAAWT,EAAKS,SAASF,KAAd9B,OAAA+B,EAAA,EAAA/B,QAAA+B,EAAA,EAAA/B,CAAAuB,KAChBA,EAAK7B,MAAQ,CACZuC,OAAO,GANSV,2EASNjB,EAAM4B,GACjBT,KAAKH,MAAMa,mBAAmB7B,qCAG9BmB,KAAKW,SAAS,CACbH,OAAM,uCAIPR,KAAKW,SAAS,CACbH,OAAM,qCAIA,IAAAI,EAAAZ,KACP,OACCa,EAAAlC,EAAAmC,cAACC,EAAA,EAAD,CAAMC,GAAIhB,KAAKH,MAAMhB,KAAKG,UACzB6B,EAAAlC,EAAAmC,cAAA,OAAKG,UAAU,iBACfC,QAAS,SAACT,GAAD,OAAKG,EAAKO,YAAYP,EAAKf,MAAMhB,KAAKG,SAAUyB,IACzDW,aAAcpB,KAAKI,QACViB,aAAcrB,KAAKO,UAC3BM,EAAAlC,EAAAmC,cAAA,OAAKQ,MAAO,CAACC,YAAYvB,KAAK/B,MAAMuC,MAAM,UAAUR,KAAKH,MAAM2B,SAAS,UAAY,UACnFX,EAAAlC,EAAAmC,cAAA,OAAKQ,MAAO,CAACG,UAAWzB,KAAK/B,MAAMuC,MAAM,aAAa,GAAIkB,WAAY,QAASC,IAAI,GAAGC,IAAK5B,KAAKH,MAAMhB,KAAKgD,aAE5GhB,EAAAlC,EAAAmC,cAAA,SAAId,KAAKH,MAAMhB,KAAKiD,mBAlCFC,aAyCRC,cAAQ,KAAM,CAACtB,mBClCI,SAAC1B,GAAD,OAAc,SAAAiD,GAC/CA,EAAS,CACR3D,KHbmC,wBGcnCG,QAASO,OD+BIgD,CAAoCpC,GEvC7CsC,sBACL,SAAAA,EAAYrC,GAAM,IAAAC,EAAA,OAAAvB,OAAAwB,EAAA,EAAAxB,CAAAyB,KAAAkC,IACjBpC,EAAAvB,OAAA0B,EAAA,EAAA1B,CAAAyB,KAAAzB,OAAA2B,EAAA,EAAA3B,CAAA2D,GAAA/B,KAAAH,KAAMH,KACDsC,eAAiBrC,EAAKqC,eAAe9B,KAApB9B,OAAA+B,EAAA,EAAA/B,QAAA+B,EAAA,EAAA/B,CAAAuB,KACtBA,EAAK7B,MAAM,CACVmE,UAAS,GAJOtC,mFAQjBE,KAAKH,MAAMwC,0DAIXrC,KAAKW,SAAS,CACbyB,UAAWpC,KAAK/B,MAAMmE,4CAGf,IAAAxB,EAAAZ,KACFhC,EAAYgC,KAAKH,MAAM7B,UAAUsE,IAAI,SAAAC,GAC1C,IAAIf,EAAWZ,EAAKf,MAAM/B,iBAAiByE,EAAK1D,KAAKG,SACrD,OACC6B,EAAAlC,EAAAmC,cAAC0B,EAAD,CAAUC,IAAKF,EAAK1D,KAAKG,SAAUH,KAAM0D,EAAK1D,KAAM2C,SAAUA,MAGhE,OACCX,EAAAlC,EAAAmC,cAAA,OAAKG,UAAU,4BACdJ,EAAAlC,EAAAmC,cAAA,OAAKG,UAAU,2BACdJ,EAAAlC,EAAAmC,cAAA,KAAGG,UAAWjB,KAAK/B,MAAMmE,SAAS,oBAAoB,sBAAuBlB,QAASlB,KAAKmC,kBAE5FtB,EAAAlC,EAAAmC,cAAA,OAAKG,UAAU,iBAAiBK,MAAO,CAACoB,UAAU1C,KAAK/B,MAAMmE,SAAS,MAAM,QAASV,WAAW,SAC9F1D,WA9BsB+D,cAoDbY,cAAWX,YAfF,SAAC/D,EAAO2E,GAC/B,OAAGA,EAASC,MAAMC,OAAO7D,GACjB,CACNjB,UAAWC,EAAMD,UAAUJ,UAC3BE,eAAgB8E,EAASC,MAAMC,OAAO7D,GACtC8D,QAAS9E,EAAMD,UAAUJ,WAGnB,CACNI,UAAWC,EAAMD,UAAUJ,UAC3BE,eAAgBG,EAAMD,UAAUF,eAChCiF,QAAS9E,EAAMD,UAAUJ,YAIuB,CAACyE,eDxDtB,iCAAAW,EAAAzE,OAAA0E,EAAA,EAAA1E,CAAA2E,EAAAvE,EAAAwE,KAAM,SAAAC,EAAMnB,GAAN,OAAAiB,EAAAvE,EAAA0E,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAClCtE,EAAauE,KAAK,QAAS,SAAAC,GACzBzB,EAAS,CACP3D,KHNyB,kBGOzBG,QAASiF,EAASC,UAJY,wBAAAL,EAAAM,SAAAR,MAAN,gBAAAS,GAAA,OAAAb,EAAAc,MAAA9D,KAAA9B,YAAA,KCwDJ8D,CAA2CE,4BCxD/D6B,mLAEJ,IAAMhB,EAAU/C,KAAKH,MAAMkD,QAAQT,IAAI,SAAC0B,GACtC,OACCnD,EAAAlC,EAAAmC,cAAA,OAAK7B,GAAI+E,EAAOnF,KAAKG,SAAUyD,IAAKuB,EAAOnF,KAAKG,SAAU4C,IAAKoC,EAAOnF,KAAKoF,WAAYC,YAAY,YAAYC,QAAQ,WAG1H,OACCtD,EAAAlC,EAAAmC,cAAA,gBACCiC,UATgChB,aAmBrBC,cAJS,SAAC/D,EAAO2E,GAC/B,MAAO,CAACG,QAAS9E,EAAMD,UAAUJ,YAGM,KAAzBoE,CAA+B+B,oBCbxCK,cACL,SAAAA,EAAYvE,GAAO,IAAAC,EAAA,OAAAvB,OAAAwB,EAAA,EAAAxB,CAAAyB,KAAAoE,IACftE,EAAAvB,OAAA0B,EAAA,EAAA1B,CAAAyB,KAAAzB,OAAA2B,EAAA,EAAA3B,CAAA6F,GAAAjE,KAAAH,KAAMH,KACDwE,OAASC,IAAMC,YACpBzE,EAAK7B,MAAQ,CAACuG,SAAS,GAHR1E,oFAKC,IAAAc,EAAAZ,KACY,OAA5BA,KAAKH,MAAM/B,qBAAqDM,IAA5B4B,KAAKH,MAAM/B,gBACjD2G,SAASC,eAAe1E,KAAKH,MAAM/B,gBAAgB6G,iBAAiB,OAAQ,SAAClE,GAE5EG,EAAKD,SAAS,CAAC6D,SAAQ,uCAKzB,IAAMA,EAAUxE,KAAK/B,MAAMuG,QAC3B,OACC3D,EAAAlC,EAAAmC,cAAA,OAAKG,UAAU,aACZuD,EAAU3D,EAAAlC,EAAAmC,cAAC8D,EAAAjG,EAAD,CACFL,KAAK,OACLuG,MAAM,UACNC,OAAO,MACPC,MAAM,QAEZ,KAEJlE,EAAAlC,EAAAmC,cAACkE,EAAA,MAAD,KACCnE,EAAAlC,EAAAmC,cAACmE,EAAD,MACET,EAAS,KAAM3D,EAAAlC,EAAAmC,cAACkE,EAAA,OAAD,CAAQpD,IAAK,IAAI5B,KAAKH,MAAM/B,eAAgBmB,GAAG,gBAAgBiG,UAAU,mBA5BpEnD,aA0CZY,cAAWX,YAPF,SAAC/D,EAAO2E,GAC/B,OAAGA,EAASC,MAAMC,OAAO7D,GACjB,CAAEnB,eAAgB8E,EAASC,MAAMC,OAAO7D,GAAI8D,QAAS9E,EAAMD,UAAUJ,WAErE,CAAEE,eAAgBG,EAAMD,UAAUF,eAAgBiF,QAAS9E,EAAMD,UAAUJ,YAGjC,KAAzBoE,CAA+BoC,ICzCnDe,EAAa,CAACC,KACdC,EAAQC,YACZC,EACA,GACAC,YACEC,IAAe3B,WAAf,EAAmBqB,GACnBO,OAAOC,8BAAgCD,OAAOC,iCAqBnCC,mLAfX,OACE/E,EAAAlC,EAAAmC,cAAC+E,EAAA,EAAD,CAAUR,MAAOA,GACfxE,EAAAlC,EAAAmC,cAACC,EAAA,EAAD,KACEF,EAAAlC,EAAAmC,cAACgF,EAAA,EAAD,CAAOC,KAAM,CAAC,OAAQ,KAAMC,OAAQ,SAACnG,GAAD,OAClCgB,EAAAlC,EAAAmC,cAAA,OAAKG,UAAU,OACbJ,EAAAlC,EAAAmC,cAACmF,EAAD,MACApF,EAAAlC,EAAAmC,cAACoF,EAAD,mBARInE,aCREoE,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASxD,MACvB,2DCZNyD,IAASN,OAAOnF,EAAAlC,EAAAmC,cAACyF,EAAD,MAAS9B,SAASC,eAAe,SD2H3C,kBAAmB8B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.97dca4b8.chunk.js","sourcesContent":["import { FETCH_PANORAMAS, CHANGE_MAIN_PANORAMAS } from \"../actions/types\";\n\nconst initialState = {\n\titemsList:[],\n  itemsDict: {},\n  mainPanoramaId: ''\n}\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_PANORAMAS:\n      const panoramas = Object.values(action.payload);\n      panoramas.sort((a,b)=>{\n        return a.data.index-b.data.index\n      })\n  \t\treturn {\n  \t\t\t...state,\n  \t\t\titemsList: panoramas,\n        itemsDict: action.payload,\n        mainPanoramaId: panoramas[0].data.objectId\n  \t\t};\n    case CHANGE_MAIN_PANORAMAS:\n      const id = action.payload;\n      return {\n        ...state,\n        mainPanoramaId: id\n      }\n    default:\n      return state;\n  }\n};","import { combineReducers } from \"redux\";\n\nimport panoramasReducer from \"./panoramasReducer\";\n\nexport default combineReducers({\n  panoramas: panoramasReducer\n});","export const FETCH_PANORAMAS = \"fetch_panoramas\";\nexport const CHANGE_MAIN_PANORAMAS = \"change_main_panoramas\"","import firebase from 'firebase'\n\nconst VRCamFirebase = firebase.initializeApp({\n  databaseURL: 'https://vr-cam-161603.firebaseio.com',\n  serviceAccount: require('./serviceAccountKey.json')\n})\n\nexport const panoramasRef = VRCamFirebase.database().ref('/panoramas').orderByChild('Building').equalTo(\"c951a5af-603f-4003-9d1c-707657febe95\")","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { changeMainPanorama } from '../store/actions/panoramasActions';\nimport { Link } from 'react-router-dom';\n\nclass Panorama extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tthis.hoverOn = this.hoverOn.bind(this);\n\t\tthis.hoverOff = this.hoverOff.bind(this);\n\t\tthis.state = {\n\t\t\thover: false\n\t\t}\n\t}\n\thandleClick(data, e){\n\t\tthis.props.changeMainPanorama(data);\n\t}\n\thoverOn(){\n\t\tthis.setState({\n\t\t\thover:true\n\t\t})\n\t}\n\thoverOff(){\n\t\tthis.setState({\n\t\t\thover:false\n\t\t})\n\n\t}\n\trender(){\n\t\treturn(\n\t\t\t<Link to={this.props.data.objectId}>\n\t\t\t\t<div className=\"panoramas-item\" \n\t\t\t\tonClick={(e)=>this.handleClick(this.props.data.objectId, e)}\n\t\t\t\tonMouseEnter={this.hoverOn} \n\t            onMouseLeave={this.hoverOff}>\n\t\t\t\t\t<div style={{borderColor:this.state.hover?'#f387a1':this.props.isactive?'#ec0974' : 'white'}}>\n\t\t\t\t\t\t<img style={{transform: this.state.hover?'scale(1.3)':'', transition: '0.5s'}} alt=\"\" src={this.props.data.thumbnail}/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<p>{this.props.data.category}</p>\n\t\t\t\t</div>\n\t\t\t</Link>\n\t\t)\n\t}\n}\n\nexport default connect(null, {changeMainPanorama})(Panorama)\n","import { panoramasRef } from \"../../config/firebase\";\nimport { FETCH_PANORAMAS, CHANGE_MAIN_PANORAMAS } from \"./types\";\n\nexport const fetchPanoramas = () => async dispatch => {\n  panoramasRef.once(\"value\", snapshot => {\n    dispatch({\n      type: FETCH_PANORAMAS,\n      payload: snapshot.val()\n    });\n  });\n};\n\nexport const changeMainPanorama = (objectId) => dispatch => {\n\tdispatch({\n\t\ttype: CHANGE_MAIN_PANORAMAS,\n\t\tpayload: objectId\n\t})\n}","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchPanoramas } from \"../store/actions/panoramasActions\";\nimport Panorama from \"./Panorama\";\nimport \"./PanoramasList.css\";\nimport { withRouter } from 'react-router'\n\nclass PanoramasList extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.handleCollapse = this.handleCollapse.bind(this);\n\t\tthis.state={\n\t\t\tcollapse:false\n\t\t}\n\t}\n\tcomponentDidMount() {\n\t\tthis.props.fetchPanoramas();\n\t}\n\n\thandleCollapse(){\n\t\tthis.setState({\n\t\t\tcollapse: !this.state.collapse\n\t\t})\n\t}\n\trender() {\n\t\tconst panoramas = this.props.panoramas.map(item=>{\n\t\t\tlet isactive = this.props.mainPanoramaId===item.data.objectId?true:false\n\t\t\treturn(\n\t\t\t\t<Panorama key={item.data.objectId} data={item.data} isactive={isactive}></Panorama>\n\t\t\t)\n\t\t})\n\t\treturn (\n\t\t\t<div className=\"panoramas-list-container\">\n\t\t\t\t<div className=\"panoramas-list-collapse\">\n\t\t\t\t\t<i className={this.state.collapse?\"fas fa-chevron-up\":\"fas fa-chevron-down\"} onClick={this.handleCollapse}></i>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"panoramas-list\" style={{maxHeight:this.state.collapse?'0px':'500px', transition:'0.5s'}}>\n\t\t\t\t\t{panoramas}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = (state, ownProps) => {\n\tif(ownProps.match.params.id){\n\t\treturn({ \n\t\t\tpanoramas: state.panoramas.itemsList,\n\t\t\tmainPanoramaId: ownProps.match.params.id, \n\t\t\tassests: state.panoramas.itemsList \n\t\t})\n\t}else{\n\t\treturn({ \n\t\t\tpanoramas: state.panoramas.itemsList,\n\t\t\tmainPanoramaId: state.panoramas.mainPanoramaId, \n\t\t\tassests: state.panoramas.itemsList })\n\t}\n};\n\nexport default withRouter(connect(mapStateToProps, {fetchPanoramas})(PanoramasList));\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nclass PanoramaAframeAssests extends Component {\n\trender(){\n\t\tconst assests = this.props.assests.map((assest)=>{\n\t\t\t\treturn(\n\t\t\t\t\t<img id={assest.data.objectId} key={assest.data.objectId} src={assest.data.desktopUrl} crossOrigin=\"anonymous\" preload=\"true\"/>\n\t\t\t\t)\n\t\t\t})\n\t\treturn(\n\t\t\t<a-assets>\n\t\t\t{assests}\n\t\t\t</a-assets>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state, ownProps)=>{\n\treturn {assests: state.panoramas.itemsList}\n}\n\nexport default connect(mapStateToProps, null)(PanoramaAframeAssests)","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport 'aframe';\nimport './MainPanorama.css';\nimport {Entity, Scene} from 'aframe-react';\nimport { withRouter } from 'react-router';\nimport PanoramaAframeAssests from './PanoramaAframeAssests';\nimport Loader from 'react-loader-spinner';\n\nclass MainPanorama extends Component{\n\tconstructor(props) {\n\t    super(props);\n\t    this.entity = React.createRef();\n\t    this.state = {loading: true}\n\t}\n\tcomponentDidUpdate(){\n\t\tif(this.props.mainPanoramaId!==null && this.props.mainPanoramaId!==undefined){\n\t\t\tdocument.getElementById(this.props.mainPanoramaId).addEventListener('load', (e)=>{\n\t\t\t\t//image loaded\n\t\t\t\tthis.setState({loading:false})\n\t\t\t})\n\t\t}\n\t}\n\trender(){\n\t\tconst loading = this.state.loading;\n\t\treturn(\n\t\t\t<div className='container'>\n\t\t\t\t{ loading? (<Loader \n\t\t\t\t\t         type=\"Grid\"\n\t\t\t\t\t         color=\"#00BFFF\"\n\t\t\t\t\t         height=\"100\"\t\n\t\t\t\t\t         width=\"100\"\n\t\t\t\t\t\t  />)\n\t\t\t\t\t\t: null\n\t\t\t\t}  \n\t\t\t\t<Scene>\n\t\t\t\t\t<PanoramaAframeAssests />\n\t\t\t\t\t{ loading? null: <Entity src={'#'+this.props.mainPanoramaId} id='main-panorama' primitive='a-sky'/>}\n\t\t\t    </Scene>\n\t\t    </div>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state, ownProps) => {\n\tif(ownProps.match.params.id){\n\t\treturn({ mainPanoramaId: ownProps.match.params.id, assests: state.panoramas.itemsList })\n\t}else{\n\t\treturn({ mainPanoramaId: state.panoramas.mainPanoramaId, assests: state.panoramas.itemsList })\n\t}\n}\nexport default withRouter(connect(mapStateToProps, null)(MainPanorama))\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\nimport reducers from \"./store/reducers\";\nimport PanoramasList from \"./components/PanoramasList\";\nimport MainPanorama from \"./components/MainPanorama\";\n\nconst middleware = [reduxThunk]\nconst store = createStore(\n  reducers,\n  {},\n  compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n\n  )\n);\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <BrowserRouter>\n          <Route path={[\"/:id\", \"/\"]} render={(props)=>\n            <div className=\"App\">\n              <MainPanorama/>\n              <PanoramasList/>\n            </div>\n          }/> \n        </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}